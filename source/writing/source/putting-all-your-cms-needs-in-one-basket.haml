---
title: Putting All Your CMS Needs In One Basket
date: 2009-02-26
tags: cms
---

%p
  My introduction to the CMS came in 2000. I had been building websites by hand
  for several years at that point and was getting quite frustrated with the
  constant maintenance required by the client once the project was
  &ldquo;complete&rdquo;. I was visiting my friend, and colleague, Doug Ward,
  and talk, as it normally did, turned towards the web. My frustration became a
  bit obvious as the conversation proceeded, and Doug showed me a system he set
  up for a recent client of his. That afternoon in his studio is solely
  responsible for me not giving up on the web almost a decade ago.

%p
  That day I was introduced to my first ever CMS,
  %em Greymatter
  (and is apparently
  = succeed ")." do
    = link_to "still available", "http://web.petefinnigan.com/greymatter.htm"
  By today&rsquo;s standards it was hardly an impressive system, with it&rsquo;s
  lack of a database structure and need to rebuild a bunch of files on each
  publish, but at the time, it opened up completely new possibilities. With a
  bit of forethought and an extra couple hours of code work it was possible to
  fully realize the meaning of "this project is now complete". At the time, I
  did not understand the entire philosophy of letting an entire application on
  your website generate all of your pages, so my use of
  %em Greymatter
  was a bick hackneyed, but it worked wonderfully. I had the system output a
  series of .txt files which I then pulled into my html files using Apache
  includes. It was rudimentary, but freed up quite a bit of my time and was the
  first baby step towards my understanding of managing content on the web.

%p
  This worked fine for several years, but eventually I began building sites that
  were more complicated and my client&rsquo;s needed more control over a wider
  array of content. This approach wouldn&rsquo;t work any longer (though I kept
  %em Greymatter
  in my back pocket and used it as recently as 2005). This was also about the
  same time that
  = link_to "Wordpress", "http://www.wordpress.com/"
  and
  = link_to "Moveable Type", "http://www.movabletype.org/"
  were gaining steam amongst the web creation community. Wanting to learn more
  about them, I dove head first into their online documentation, and set about
  creating the same test blog with each one. It was an eye opening experience,
  and a leap of faith, to allow a pre-created system generate your entire site
  through the use of templates, but I learned quite a bit in the process. In the
  end, I found it was easier for me to work with
  %em Wordpress
  and that became my new CMS of choice for the next few years.

%p
  However,
  %em Wordpress
  brought a whole new set of issues with it. With
  %em Wordpress
  I always felt like I was fighting against the system in place to make it do
  what I wanted it to do, rather than having the system in place to allow me to
  execute my vision. It&rsquo;s a minor distinction, but an all too frustrating
  one. My design career was based in print just as much as it was on the web,
  which allowed me a unique perspective. I understood the limitations inherit on
  the web at the time, but within those limitations, I still expected to have
  the precision that was capable. I found that precision increasingly difficult
  within the structure
  %em Wordpress
  seemed to impose. This frustration steadily grew again until it eclipsed that
  same frustration I felt back at Doug&rsquo;s place in 2000. By 2007 I was
  ready to call it quits on the web again.

%p
  Then I met
  = succeed "." do
    = link_to "Dave Bias", "http://thisdesignstudio.com/"
  We were both looking to combine efforts with like-minded designers, and
  grabbed a bite to eat one night to talk about things. My concern was that most
  of the work he was doing was on the web, which I had recently moved away from.
  We talked a bit and he introduced me to the CMS he was using to build his
  clients&rsquo; sites,
  = succeed "." do
    = link_to "Textpattern", "http://textpattern.com/"
  He pointed me to the book
  %em Textpattern Solutions
  and sent me some links to find out more about the system. I got the book the
  next day and two weeks later I was hooked. TXP became my CMS of choice.

%p
  I instantly fell in love with the (relatively) plain language XML based
  templating system. That, combined with the building block nature of template
  creation afforded me the control I felt was lacking with
  = succeed "." do
    %em Wordpress
  %em Textpattern
  was that system I had been searching for, one that was a powerful tool in
  website creation, rather than a speed bump. In addition to the flexibility I
  had been searching years for, I found it an extremely speedy environment to
  work in, building this very site in just 2 days of coding (the first site I
  built using TXP)
  %em [Note - the current version of this website is now built upon Middleman].

%p
  The
  %em only
  area I see that
  %em Wordpress
  has a leg up on
  %em Textpattern
  is in the development community.
  = succeed "," do
    %em Wordpress
  being the industry standard at this point, is where the developers have
  flocked to. However, that&rsquo;s not a knock on the
  %em Textpattern
  community at all, as that community, while smaller, has created just as many
  useful plugins to extend the system. In Operating System terms,
  %em Wordpress
  is to Windows as
  %em Textpattern
  is to OS X. Sure, there are
  %em more
  plugins (applications) available for WP, but any of the useful ones have a TXP
  counterpart.

%p
  Over the past two years I&rsquo;ve been happily bringing web projects into the
  studio, knowing that
  %em Textpattern
  would make a large percentage of the effort in building the site go towards
  the design goals rather than wasted on troubleshooting and working around the
  system. With the barriers in the CMS implementation removed I&rsquo;ve found
  that we&rsquo;ve been able to knock out the best work we&rsquo;ve done on the
  web, able to concentrate more strongly on the actual design of the site, with
  no worries of what will be needed to execute that design. &ldquo;It&rsquo;s being
  built in TXP, of course we can do it,&rdquo; became a regular mantra.

%p
  While I have no urge to stray from TXP anytime soon, I&rsquo;m well aware of
  how the CMS world works. Systems come and go, development communities migrate,
  and clients have their own preferences. To leave all your CMS needs to just
  one system is a bad place to be, and that&rsquo;s where I have always been.
  = link_to "Expression Engine", "http://expressionengine.com/"
  is extremely intriguing to me, as it seems to follow a very similar site
  creation philosophy as TXP. Sooner, rather than later, I will create a test
  site using
  %em Expression Engine
  to add it to the arsenal.
  %em Wordpress
  has recently upgraded (again) and thanks to an older client site, I&rsquo;ve
  been doing some poking around. I&rsquo;m impressed with some changes that they
  have made, and while the same barriers that drove me away seem to still be in
  place, the studio has actually lost work because we&rsquo;ve tried to steer
  potential clients away from WP. I also haven&rsquo;t looked at
  %em Moveable Type
  in years (since the 2.X days if I recall). What improvements have been made
  there to keep up with the rest?

%p
  When all is said and done, favorites are great, but favorite should not lead
  to exclusivity. Each and every system, whether it&rsquo;s a content management
  system or a public transit system, has it&rsquo;s own sets of pros and cons.
  Others you work with will have their own favorites. And no one has ever lost
  work from too much working knowledge. One of my goals for the next year is to
  get out of the rut of exclusivity. While I will still recommend TXP as my
  preferred option, I won&rsquo;t be wary of clients that require
  = succeed "," do
    %em Wordpress
  and will know that
  %em Expression Engine
  or
  %em Drupal
  would be more appropriate for certain projects. That way, when the time comes,
  adaptation will simply mean reaching for a different .zip archive come
  installation time.
