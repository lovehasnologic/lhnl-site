---
title: Whereâ€™s The One CMS To Rule Them&nbsp;All?
date: 2013-03-15
---

%p
  I&rsquo;ve written in the past about content management systems. The ability
  to quickly and (relatively) easily roll out a platform for clients to manage
  their own websites rekindled my interest in designing for the web in the early
  to mid 2000&rsquo;s. My first few years were spent looking at the various
  systems available to me, picking one I liked best and fitting it to the needs
  of every client that came our way. I started with
  = succeed "," do
    = link_to "Greymatter", "http://en.wikipedia.org/wiki/Greymatter_(software)"
  frustratedly skipped over Wordpress and Moveable Type and eventually found
  comfort in
  = succeed "." do
    = link_to "Textpattern", "http://textpattern.com/"
  Since my last time writing on the topic we&rsquo;ve moved most of our new
  client work to
  = link_to "Expression Engine", "http://ellislab.com/expressionengine"
  and life has been swell. But as site complexity continues to increase, budgets
  remain fairly static and the only regularity we see in client needs is
  uniqueness, our previous way of thinking has begun to loosen up.

%p
  Going back to the early 2000&rsquo;s I was discouraged with web design and
  development. As my client list grew I found more and more of my time spent
  with simple content updates. The reality of the industry for me was that it
  was less design and more data entry. I was about to walk away when a good pal
  introduced me to the world of systems that allowed clients to manage their own
  sites. Who knows where we&rsquo;d be right now had we never had that
  conversation. But, as I mentioned, until recently, I was on a search to
  discover the one CMS to rule them all.

%p
  The past 18 months have seen quite a bit of change in our industry.
  We&rsquo;ve gone back in time and have embraced fluidity once again in our
  design systems and in our processes. As we embraced this fluidity at the
  studio, it became abundantly clear that I needed to embrace fluidity in the
  platforms we use as well. A client with unique needs requires a system that
  best handles those needs. So, how have my thoughts changed in the past few
  years?

%h3
  Expression Engine

%p
  If I&rsquo;m honest with myself I have to admit that I play favorites. Once we
  gather our clients&rsquo; site requirements, I&rsquo;ll always take a look at
  Expression Engine to see if it fits the bill. We&rsquo;ve been using it more
  than any other CMS since mid-late 2009 and I&rsquo;m still regularly amazed at
  the perfect blend of flexibility, precision and structure it affords to both
  our devolopment team and our clients&rsquo; operations teams. A little bit of
  additional time spent during development pays dividends on site handoff with
  carefully constructed backend layouts that ensure clients only see what they
  need as they&rsquo;re managing their sites.

%p
  %strong Website:
  = link_to "http://ellislab.com/expressionengine", "http://ellislab.com/expressionengine"

%p
  %strong Pros:
  Powerful built-in member management and permissions system, a great
  development community supported by users who expect to pay for great software
  add-ons, fine-tuned control over content structure, blank slate templates

%p
  %strong Cons:
  content customization and member permissions come at a price with a plethora
  of controls that need to be managed (quite often an important permission will
  be set incorrectly, only to be discovered at hand-off), learning curve for new
  users is steep, many of the system&rsquo;s features are overkill for smaller
  sites

%h3
  Textpattern

%p
  Before we took the leap to Expression Engine, Textpattern was our CMS of
  choice (and I wrote about why that was
  = succeed ")." do
    = link_to "right here", "http://lovehasnologic.com/writing/article/how-i-learned-to-love-a-cms"
  It&rsquo;s still a wonderful system that benefits from being simple, flexible
  and fast, and we still look to it when we know that Expression Engine will be
  overkill. Textpattern was the first CMS I encountered that supported the way I
  preferred to build websites. It introduced me to the concept of blank-slate
  template development and by the end of my first project with it I had
  committed the templating language to memory. Unfortunately, as time has gone
  on, its development has moved slower than it needs to, and it can&rsquo;t
  match some of the other systems feature for feature anymore. What it does, it
  does wonderfully. What it doesn&rsquo;t do leaves it with some gaping holes
  that make it unusable for client work. Looking back on the sites we built on
  Textpattern, there are probably a couple that would have benefitted from us
  moving to Expression Engine a bit earlier.

%p
  %strong Website:
  = link_to "http://textpattern.com", "http://textpattern.com"

%p
  %strong Pros:
  quick learning curve, lightning-fast development, simple and structured
  content management for users, blank slate templates

%p
  %strong Cons:
  inflexibile admin screens, inactive development community, poor member
  management and permissions options

%h3
  Perch

%p
  The past few years have been quite exciting in the CMS world. While the big
  players (Expression Engine, Wordpress, Drupal, etc.) continue to grow, build
  and refine their systems, they&rsquo;ve left room beneath them for simple,
  targeted systems to emerge. These systems typically integrate directly with
  your HTML files and support simple and minimal content structures. Perch is my
  favorite of the bunch. It is quick to integrate, allows clients the ability to
  update their content quickly and easily and has just enough features to
  integrate most any content we can throw at it. If all you need is a flexible
  brochure-ware site, or if you&rsquo;ve looked at fuller-featured CMS solutions
  and have been confused at the process of building with them, Perch provides
  the perfect solution.

%p
  %strong Website:
  = link_to "http://grabaperch.com", "http://grabaperch.com"

%p
  %strong Pros:
  adds content management to simple HTML files, quick learning curve,
  lightweight and fast

%p
  %strong Cons:
  light in the features department, not much of a development community

%h3
  Craft

%p
  Pixel & Tonic had been developers of some of the best Expression Engine
  add-ons on the market. This past fall they branched out into the world of CMS
  development with the release of Craft, their own system built around content
  structure. You define your sections, determine the elements of each entry and
  then build your templates around content requests. Their build philosophy is
  very clearly influenced by Expression Engine, but it&rsquo;s obvious that they
  took care to address some of Expression Engine&rsquo;s shortcomings and
  simplify some of its complexity. We haven&rsquo;t built any sites with Craft
  yet as it&rsquo;s still in beta, but it&rsquo;s definitely on our radar and I
  can&rsquo;t wait to give it a run through.

%p
  %strong Website:
  = link_to "http://buildwithcraft.com", "http://buildwithcraft.com"

%p
  %strong Pros:
  content is king, flexible management, pay only for the features you need

%p
  %strong Cons:
  still in beta, development community unclear

%h3 Ruby on Rails

%p
  Sometimes the needs of the project don&rsquo;t align with an off-the-shelf
  solution. RoR has brought the creation of custom systems within the grasp of
  smaller organizations, especially when you add something like
  = link_to "Refinery", "http://refinerycms.com/"
  on top. The past year has seen more of our clients looking for fully
  customized solutions that are perfect for an RoR environment. This option is
  not for everyone since it requires some specialized programming knowledge, but
  it proves that the lines between CMS work and app development have begun to
  blur.

%p
  %strong Website:
  = link_to "http://rubyonrails.org", "http://rubyonrails.org"

%p
  %strong Pros:
  fully customizable solutions, if you can think it, you can build it

%p
  %strong Cons:
  steep learning curve, doesn&rsquo;t offer the "ready to go" backend that a
  pre-built CMS provides, specialized programming knowledge is needed

%h2 What&rsquo;s The Best?

%p
  As we&rsquo;ve expanded our platform options over the past months, we&rsquo;ve
  found nothing but upsides. Clients get just as much firepower as they require
  and can manage, we spend less time trying to retrofit inadequate systems to
  the needs of our projects, and throughout the project, we&rsquo;re able to let
  the content structure and needs guide the way. We build sites faster and our
  clients are happier. If you&rsquo;re looking to hire someone to build a site
  for you and they start throwing out solutions before you&rsquo;ve solidified
  your needs and content structure, then I&rsquo;d approach the conversation
  with a degree of skepticism. If you&rsquo;re a designer/developer working with
  a client, stop and listen to their needs before deciding on a platform for
  their site. As you can see, there are more than enough options for managing
  the site once you know the needs. You would do well to learn the ins and outs
  of more than a single system.
